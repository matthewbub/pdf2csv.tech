package views

import (
  "fmt"
  "strconv"
	"bus.zcauldron.com/pkg/models"
	"bus.zcauldron.com/pkg/views/partials"
	"bus.zcauldron.com/pkg/utils"
)

type FinancesData struct {
	Title string
	Name string
	IsLoggedIn bool
	Receipts []models.Receipt
	Pagination PaginationData
	User utils.UserObject
}

type PaginationData struct {
	CurrentPage    int
	NextPage       int
	PreviousPage   int
	TotalRecords   int
	TotalPages     int
	RecordsPerPage int
}

templ Finances(data FinancesData) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			@partials.GlobalHead(data.Title)
		</head>
		<body>
			@partials.GlobalHeader(data.IsLoggedIn)			
      <main>
        <div class="message-container" style="display: none;">
          <i class="fa-solid fa-triangle-exclamation"></i>
          <p id="message"></p>
          <a href="/dashboard/finances" id="close-message-button" aria-label="Close message"><i class="fa-solid fa-x"></i></a>
        </div>
        <div class="receipt-collection-container">
          <div class="receipt-collection-header">
            <h2>View your recenet finance history</h2>          

            <div class="receipt-collection-actions">
              <a href="/dashboard/finances/receipts" class="primary-button">Add Receipt</a>
            </div>
          </div>
          <table class="modifiable-receipts" id="receipts-table">
            <thead>
              <tr>
                <th>
                if len(data.Receipts) != 0 {
                  <input type="checkbox" name="select-all" id="select-all" />
                  <label for="select-all" aria-label="Select All" class="sr-only">Select All</label>
                }
                </th>
                <th>Merchant</th>
                <th>Date</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              if len(data.Receipts) == 0 {
                <tr class="receipt">
                 <td colspan="4" style="text-align: center;">No data found <br/><a href="/dashboard/finances/receipts">Add some receipts</a></td>
                </tr>
              }

              for _, item := range data.Receipts {
                <tr class="receipt">
                  <td>
                    <input type="checkbox" name="receipt-id" value={ item.ID } />
                  </td>
                  <td>
                    <a href={ templ.SafeURL(fmt.Sprintf("/dashboard/finances/receipts/%s", item.ID)) }>
                      { item.Merchant }
                    </a>
                  </td>
                  <td>
                    if item.Date != "" {
                      { item.Date }
                    } else {
                      <span>N/A</span>
                    }
                  </td>
                  <td>{ item.Total }</td>
                </tr>
              }
            </tbody>
          </table>

          if len(data.Receipts) != 0 {          
            <div class="modifiable-receipts-actions"> 
              <button class="outlined-button" id="delete-selected">Delete (x)</button>
              <button class="outlined-button" id="export-selected">Export (x)</button>
            </div>

            <div id="deleteModal" class="modal" style="display: none;">
              <div class="modal-content">
                <h3>Confirm Deletion</h3>
                <p>Are you sure you want to delete the selected receipts?</p>
                <div class="modal-actions">
                  <button
                    id="confirmDelete" 
                    class="primary-button"
                  >
                    Delete
                  </button>
                  <button id="cancelDelete" class="secondary-button">
                    Cancel
                  </button>
                </div>
              </div>
            </div>

            <script>
              const selectAllCheckbox = document.getElementById('select-all');
              const receiptCheckboxes = document.querySelectorAll('input[name="receipt-id"]');
              const deleteSelectedButton = document.getElementById('delete-selected');
              const exportSelectedButton = document.getElementById('export-selected');
              const modifiableReceiptActions = document.querySelector('.modifiable-receipts-actions');

              function updateButtonVisibility() {
                const selectedReceipts = Array.from(receiptCheckboxes).filter(checkbox => checkbox.checked);
                const hasSelectedReceipts = selectedReceipts.length > 0;
                
                deleteSelectedButton.textContent = `Delete (${selectedReceipts.length})`;
                exportSelectedButton.textContent = `Export (${selectedReceipts.length})`;
                
                modifiableReceiptActions.style.display = hasSelectedReceipts ? 'flex' : 'none';
              }

              selectAllCheckbox.addEventListener('change', function() {
                receiptCheckboxes.forEach(checkbox => {
                  checkbox.checked = selectAllCheckbox.checked;
                });

                updateButtonVisibility();
              });

              receiptCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                  selectAllCheckbox.checked = Array.from(receiptCheckboxes).every(checkbox => checkbox.checked);

                  updateButtonVisibility();
                });
              });          

              exportSelectedButton.addEventListener('click', function() {
                const selectedReceipts = Array.from(receiptCheckboxes).filter(checkbox => checkbox.checked);
                const selectedReceiptIds = selectedReceipts.map(receipt => receipt.value);
                console.log(selectedReceiptIds);
              });

              updateButtonVisibility();


              const modal = document.getElementById('deleteModal');
              const confirmDeleteButton = document.getElementById('confirmDelete');
              const cancelDeleteButton = document.getElementById('cancelDelete');

              deleteSelectedButton.addEventListener('click', function() {
                const selectedReceipts = Array.from(receiptCheckboxes).filter(checkbox => checkbox.checked);
                if (selectedReceipts.length > 0) {
                  modal.style.display = 'block';
                }
              });

              confirmDeleteButton.addEventListener('click', function() {
                const selectedReceipts = Array.from(receiptCheckboxes).filter(checkbox => checkbox.checked);
                const selectedReceiptIds = selectedReceipts.map(receipt => receipt.value);
                console.log('Deleting receipts:', selectedReceiptIds);

                fetch('/api/v1/finances/receipts/delete', {
                  method: 'DELETE',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ receipt_ids: selectedReceiptIds }),
                })
                .then(response => response.json())
                .then(data => {
                  if (data.success) {
                    window.location.href = window.location.href + '?deleted=true';
                  } else {
                    console.error('Failed to delete receipts:', data.error);
                  }
                })
                .catch(error => {
                  console.error('Error deleting receipts:', error);
                });
                
                // TODO: Implement actual deletion logic here
                modal.style.display = 'none';
              });

              cancelDeleteButton.addEventListener('click', function() {
                modal.style.display = 'none';
              });

              // Close the modal if clicking outside of it
              window.addEventListener('click', function(event) {
                if (event.target === modal) {
                  modal.style.display = 'none';
                }
              });

              if (window.location.search.includes('deleted=true')) {
                const message = document.getElementById('message');
                const messageContainer = document.querySelector('.message-container');
                message.textContent = 'Receipts deleted successfully';                
                messageContainer.style.display = 'flex';
              }
            </script>

            <div class="receipt-pagination">
              if data.Pagination.PreviousPage < 1 {
                <a href="#" class="secondary-button disabled">Previous</a>
              } else {
                <a href={ templ.SafeURL(fmt.Sprintf("/dashboard/finances?page=%d&records=%d", data.Pagination.PreviousPage, data.Pagination.RecordsPerPage)) } class="secondary-button">Previous</a>
              }
              <span>Page { strconv.Itoa(data.Pagination.CurrentPage) } of { strconv.Itoa(data.Pagination.TotalPages) }</span>
              if data.Pagination.NextPage > data.Pagination.TotalPages {
                <a href="#" class="secondary-button disabled">Next</a>
              } else {
                <a href={ templ.SafeURL(fmt.Sprintf("/dashboard/finances?page=%d&records=%d", data.Pagination.NextPage, data.Pagination.RecordsPerPage)) } class="secondary-button">Next</a>
              }
            </div>
            <p>
              Displaying records 
              { strconv.Itoa(data.Pagination.CurrentPage * data.Pagination.RecordsPerPage - data.Pagination.RecordsPerPage + 1) } 
              to
              if (len(data.Receipts) < data.Pagination.RecordsPerPage) {
                { strconv.Itoa(len(data.Receipts) + (data.Pagination.CurrentPage * data.Pagination.RecordsPerPage) - data.Pagination.RecordsPerPage)  }
              } else {
                { strconv.Itoa(data.Pagination.CurrentPage * data.Pagination.RecordsPerPage) }
              }
              of
              { strconv.Itoa(data.Pagination.TotalRecords) }
            </p>
          }
        </div>
      </main>
      @partials.GlobalFooter()
      <script src="/js/receipt-utils.js"></script>
		</body>
	</html>
}
