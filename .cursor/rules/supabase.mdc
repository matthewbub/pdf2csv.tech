---
description: Working with Supabase
globs: route.ts, route.tsx
alwaysApply: false
---

# Your rule content

- Always use Supabase on the Server. Never expose the Supabase SDK on the client. Use: [supabase-server.ts](mdc:src/lib/supabase-server.ts)
- If you identify an area that could benifit from an Postges Database Function, always propose it.

## Supabase Schema

```sql
create table public."ChatBot_Messages" (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  chat_session_id uuid null,
  content text null,
  is_user boolean null,
  model text null,
  user_id uuid null,
  metadata jsonb null,
  model_provider text null,
  response_type text null CHECK (response_type IN ('A', 'B')),
  parent_message_id uuid null REFERENCES public."ChatBot_Messages"(id),
  response_group_id uuid null,
  constraint ChatBot_Messages_pkey primary key (id),
  constraint ChatBot_Messages_chat_session_id_fkey foreign KEY (chat_session_id) references "ChatBot_Sessions" (id),
  constraint ChatBot_Messages_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

-- Indexes
CREATE INDEX IF NOT EXISTS idx_chatbot_messages_response_group ON public."ChatBot_Messages"(response_group_id);
CREATE INDEX IF NOT EXISTS idx_chatbot_messages_parent ON public."ChatBot_Messages"(parent_message_id);

create table public."ChatBot_Sessions" (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null default now(),
  name text null,
  user_id uuid null,
  constraint ChatSessions_pkey primary key (id),
  constraint ChatBot_Sessions_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create table public."ChatBot_Users" (
  id uuid not null,
  "createdAt" timestamp with time zone not null default now(),
  updated_at timestamp with time zone null default now(),
  "stripeCustomerId" text null,
  "stripeSubscriptionId" text null,
  "subscriptionStatus" text null,
  "checkoutSessionId" text null,
  "subscriptionPeriodEnd" date null,
  email text null,
  user_id uuid null,
  username text null,
  message_count integer not null default 0,
  chat_context text null default 'You are a helpful assistant'::text,
  constraint ChatBot_Users_pkey primary key (id),
  constraint ChatBot_Users_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

# functions

create_response_group
BEGIN
    RETURN gen_random_uuid();
END;

delete_chat_session
BEGIN
    DELETE FROM public."ChatBot_Messages" WHERE chat_session_id = session_id;
    DELETE FROM public."ChatBot_Sessions" WHERE id = session_id;
END;

increment_message_count
DECLARE
    new_count INTEGER;
BEGIN
    UPDATE "ChatBot_Users"
    SET message_count = COALESCE(message_count, 0) + increment_by,
        updated_at = CURRENT_TIMESTAMP
    WHERE user_id = incoming_uid
    RETURNING message_count INTO new_count;
    
    RETURN new_count;
END;
```
