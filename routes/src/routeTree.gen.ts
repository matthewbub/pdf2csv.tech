/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as SecurityQuestionsImport } from './routes/security-questions'
import { Route as MeImport } from './routes/me'
import { Route as LoginImport } from './routes/login'
import { Route as ForgotPasswordImport } from './routes/forgot-password'
import { Route as ErrorImport } from './routes/error'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const SecurityQuestionsRoute = SecurityQuestionsImport.update({
  id: '/security-questions',
  path: '/security-questions',
  getParentRoute: () => rootRoute,
} as any)

const MeRoute = MeImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ForgotPasswordRoute = ForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const ErrorRoute = ErrorImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorImport
      parentRoute: typeof rootRoute
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeImport
      parentRoute: typeof rootRoute
    }
    '/security-questions': {
      id: '/security-questions'
      path: '/security-questions'
      fullPath: '/security-questions'
      preLoaderRoute: typeof SecurityQuestionsImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/me': typeof MeRoute
  '/security-questions': typeof SecurityQuestionsRoute
  '/sign-up': typeof SignUpRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/me': typeof MeRoute
  '/security-questions': typeof SecurityQuestionsRoute
  '/sign-up': typeof SignUpRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/me': typeof MeRoute
  '/security-questions': typeof SecurityQuestionsRoute
  '/sign-up': typeof SignUpRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/error'
    | '/forgot-password'
    | '/login'
    | '/me'
    | '/security-questions'
    | '/sign-up'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/error'
    | '/forgot-password'
    | '/login'
    | '/me'
    | '/security-questions'
    | '/sign-up'
  id:
    | '__root__'
    | '/'
    | '/error'
    | '/forgot-password'
    | '/login'
    | '/me'
    | '/security-questions'
    | '/sign-up'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ErrorRoute: typeof ErrorRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  MeRoute: typeof MeRoute
  SecurityQuestionsRoute: typeof SecurityQuestionsRoute
  SignUpRoute: typeof SignUpRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ErrorRoute: ErrorRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  MeRoute: MeRoute,
  SecurityQuestionsRoute: SecurityQuestionsRoute,
  SignUpRoute: SignUpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/error",
        "/forgot-password",
        "/login",
        "/me",
        "/security-questions",
        "/sign-up"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/me": {
      "filePath": "me.tsx"
    },
    "/security-questions": {
      "filePath": "security-questions.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
